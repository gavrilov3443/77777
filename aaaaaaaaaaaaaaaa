using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Json;

namespace RoleBasedSystem
{
    [Serializable]
    public class User
    {
        public string Login { get; set; }
        public string Password { get; set; }
    }

    [Serializable]
    public class Student : User
    {
        public string FullName { get; set; }
        public int Age { get; set; }
        public int BirthYear { get; set; }
        public string Group { get; set; }
        public List<Grade> Grades { get; set; } = new();

        public void ViewGrades()
        {
            Console.WriteLine($"Оценки для {FullName} (Группа: {Group}):");
            foreach (var grade in Grades)
            {
                Console.WriteLine($"{grade.Subject}: {grade.Score} (Дата: {grade.Date})");
            }
        }
    }

    [Serializable]
    public class Grade
    {
        public string Subject { get; set; }
        public int Score { get; set; }
        public DateTime Date { get; set; }
    }

    [Serializable]
    public class Teacher : User
    {
        public string FullName { get; set; }
        public int BirthYear { get; set; }
        public List<string> Disciplines { get; set; } = new();
        public List<string> Groups { get; set; } = new();

        public void ViewJournal(List<Student> students)
        {
            Console.WriteLine($"Журнал преподавателя {FullName}:");
            foreach (var student in students.Where(s => Groups.Contains(s.Group)))
            {
                Console.WriteLine($"\nСтудент: {student.FullName} (Группа: {student.Group})");
                foreach (var grade in student.Grades.Where(g => Disciplines.Contains(g.Subject)))
                {
                    Console.WriteLine($"{grade.Subject}: {grade.Score} (Дата: {grade.Date})");
                }
            }
        }

        public void AddOrEditGrade(Student student, string subject, int score)
        {
            if (!Disciplines.Contains(subject) || !Groups.Contains(student.Group))
            {
                Console.WriteLine("Вы не можете выставить оценку для этого предмета или группы.");
                return;
            }

            var grade = student.Grades.FirstOrDefault(g => g.Subject == subject);
            if (grade == null)
            {
                student.Grades.Add(new Grade { Subject = subject, Score = score, Date = DateTime.Now });
                Console.WriteLine("Оценка успешно добавлена.");
            }
            else
            {
                grade.Score = score;
                grade.Date = DateTime.Now;
                Console.WriteLine("Оценка успешно обновлена.");
            }
        }
    }

    [Serializable]
    public class Admin : User
    {
        public void ViewAllData(List<Student> students, List<Teacher> teachers)
        {
            Console.WriteLine("Данные студентов:");
            foreach (var student in students)
            {
                Console.WriteLine($"- {student.FullName} (Группа: {student.Group})");
            }

            Console.WriteLine("\nДанные преподавателей:");
            foreach (var teacher in teachers)
            {
                Console.WriteLine($"- {teacher.FullName}");
            }
        }

        public void AddStudent(List<Student> students)
        {
            Console.WriteLine("Добавление нового студента:");
            Console.Write("ФИО: ");
            var fullName = Console.ReadLine();
            Console.Write("Возраст: ");
            var age = int.Parse(Console.ReadLine());
            Console.Write("Год рождения: ");
            var birthYear = int.Parse(Console.ReadLine());
            Console.Write("Группа: ");
            var group = Console.ReadLine();
            Console.Write("Логин: ");
            var login = Console.ReadLine();
            Console.Write("Пароль: ");
            var password = Console.ReadLine();

            students.Add(new Student { FullName = fullName, Age = age, BirthYear = birthYear, Group = group, Login = login, Password = password });
            Console.WriteLine("Студент успешно добавлен.");
        }

        public void AddTeacher(List<Teacher> teachers)
        {
            Console.WriteLine("Добавление нового преподавателя:");
            Console.Write("ФИО: ");
            var fullName = Console.ReadLine();
            Console.Write("Год рождения: ");
            var birthYear = int.Parse(Console.ReadLine());
            Console.Write("Дисциплины (через запятую): ");
            var disciplines = Console.ReadLine()?.Split(',').Select(d => d.Trim()).ToList();
            Console.Write("Группы (через запятую): ");
            var groups = Console.ReadLine()?.Split(',').Select(g => g.Trim()).ToList();
            Console.Write("Логин: ");
            var login = Console.ReadLine();
            Console.Write("Пароль: ");
            var password = Console.ReadLine();

            teachers.Add(new Teacher { FullName = fullName, BirthYear = birthYear, Disciplines = disciplines, Groups = groups, Login = login, Password = password });
            Console.WriteLine("Преподаватель успешно добавлен.");
        }

        public void EditStudent(List<Student> students)
        {
            Console.WriteLine("Введите логин студента, которого хотите изменить:");
            var login = Console.ReadLine();
            var student = students.FirstOrDefault(s => s.Login == login);

            if (student == null)
            {
                Console.WriteLine("Студент не найден.");
                return;
            }

            Console.Write("Новое ФИО (оставьте пустым для пропуска): ");
            var fullName = Console.ReadLine();
            Console.Write("Новый возраст (оставьте пустым для пропуска): ");
            var ageInput = Console.ReadLine();
            Console.Write("Новая группа (оставьте пустым для пропуска): ");
            var group = Console.ReadLine();

            if (!string.IsNullOrEmpty(fullName)) student.FullName = fullName;
            if (int.TryParse(ageInput, out var age)) student.Age = age;
            if (!string.IsNullOrEmpty(group)) student.Group = group;

            Console.WriteLine("Данные студента обновлены.");
        }

        public void DeleteStudent(List<Student> students)
        {
            Console.WriteLine("Введите логин студента, которого хотите удалить:");
            var login = Console.ReadLine();
            var student = students.FirstOrDefault(s => s.Login == login);

            if (student == null)
            {
                Console.WriteLine("Студент не найден.");
                return;
            }

            students.Remove(student);
            Console.WriteLine("Студент успешно удален.");
        }
    }

    class Program
    {
        static List<Student> students = new();
        static List<Teacher> teachers = new();
        static Admin admin = new() { Login = "admin", Password = "admin" };

        static void Main()
        {
            InitializeData();
            while (true)
            {
                Console.Clear();
                Console.WriteLine("Добро пожаловать! Выберите роль для входа:");
                Console.WriteLine("1. Студент\n2. Преподаватель\n3. Администратор\n4. Выход");
                var choice = Console.ReadKey().Key;

                switch (choice)
                {
                    case ConsoleKey.D1:
                        Login<Student>(students, student =>
                        {
                            student.ViewGrades();
                            Console.ReadKey();
                        });
                        break;
                    case ConsoleKey.D2:
                        Login<Teacher>(teachers, teacher =>
                        {
                            teacher.ViewJournal(students);
                            Console.ReadKey();
                        });
                        break;
                    case ConsoleKey.D3:
                        if (Authenticate(admin))
                        {
                            AdminMenu();
                        }
                        break;
                    case ConsoleKey.D4:
                        return;
                }
            }
        }

        static void InitializeData()
        {
            students.Add(new Student
            {
                FullName = "Иван Иванов",
                Age = 20,
                BirthYear = 2003,
                Group = "ИС-21",
                Login = "ivanov",
                Password = "password",
                Grades = new List<Grade> { new Grade { Subject = "Математика", Score = 4, Date = DateTime.Now } }
            });

            teachers.Add(new Teacher
            {
                FullName = "Петр Петров",
                BirthYear = 1980,
                Disciplines = new List<string> { "Математика", "Физика" },
                Groups = new List<string> { "ИС-21" },
                Login = "petrov",
                Password = "password"
            });
        }

        static bool Authenticate(User user)
        {
            Console.Write("\nЛогин: ");
            var login = Console.ReadLine();
            Console.Write("Пароль: ");
            var password = Console.ReadLine();
            return user.Login == login && user.Password == password;
        }

        static void Login<T>(List<T> users, Action<T> action) where T : User
        {
            Console.Write("\nЛогин: ");
            var login = Console.ReadLine();
            Console.Write("Пароль: ");
            var password = Console.ReadLine();

            var user = users.FirstOrDefault(u => u.Login == login && u.Password == password);
            if (user == null)
            {
                Console.WriteLine("Неверные данные для входа.");
                return;
            }

            action(user);
        }

        static void AdminMenu()
        {
            while (true)
            {
                Console.Clear();
                Console.WriteLine("Меню администратора:");
                Console.WriteLine("1. Просмотр всех данных\n2. Добавить студента\n3. Добавить преподавателя\n4. Изменить студента\n5. Удалить студента\n6. Выход");
                var choice = Console.ReadKey().Key;

                switch (choice)
                {
                    case ConsoleKey.D1:
                        admin.ViewAllData(students, teachers);
                        Console.ReadKey();
                        break;
                    case ConsoleKey.D2:
                        admin.AddStudent(students);
                        break;
                    case ConsoleKey.D3:
                        admin.AddTeacher(teachers);
                        break;
                    case ConsoleKey.D4:
                        admin.EditStudent(students);
                        break;
                    case ConsoleKey.D5:
                        admin.DeleteStudent(students);
                        break;
                    case ConsoleKey.D6:
                        return;
                }
            }
        }
    }
}
